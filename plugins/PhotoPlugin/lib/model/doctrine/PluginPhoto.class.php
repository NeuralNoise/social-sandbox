<?php

/**
 * PluginPhoto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class PluginPhoto extends BasePhoto {

    public function getLink($tamanyo='thumb', $relative=true) {
        $user = $this->getUser();
        $url = 'users/' . $user->getUsername() . '/photos/' . $this->getAlbumId() . '/' . $tamanyo . '/' . $this->getName();
        $url = $relative ? $url : sfConfig::get('app_base_url') . $url;
        return $url;
    }

    public function getUser() {
        return $this->getAlbum()->getUser();
    }

    public function getUserName() {
        return $this->getUser()->getName();
    }

    public function getAlbumsPath() {
        $user = $this->getUser();
        return sfConfig::get('sf_web_dir') . DIRECTORY_SEPARATOR . 'users' . DIRECTORY_SEPARATOR . $user->getUsername() . DIRECTORY_SEPARATOR . 'photos' . DIRECTORY_SEPARATOR;
    }

    public function getAlbumPath() {
        return $this->getAlbumsPath() . $this->getAlbumId() . DIRECTORY_SEPARATOR;
    }

    public function moveFromTo($origen, $destino) {//origen y destino son ids de albums
        $albumPath = $this->getAlbumsPath();
        $origenThumb = $albumPath . $origen . DIRECTORY_SEPARATOR . 'thumb' . DIRECTORY_SEPARATOR . $this->getName();
        $origenMedium = $albumPath . $origen . DIRECTORY_SEPARATOR . 'medium' . DIRECTORY_SEPARATOR . $this->getName();
        $origenBig = $albumPath . $origen . DIRECTORY_SEPARATOR . 'big' . DIRECTORY_SEPARATOR . $this->getName();
        $destinoThumb = $albumPath . $destino . DIRECTORY_SEPARATOR . 'thumb' . DIRECTORY_SEPARATOR . $this->getName();
        $destinoMedium = $albumPath . $destino . DIRECTORY_SEPARATOR . 'medium' . DIRECTORY_SEPARATOR . $this->getName();
        $destinoBig = $albumPath . $destino . DIRECTORY_SEPARATOR . 'big' . DIRECTORY_SEPARATOR . $this->getName();
        if (file_exists($origenThumb) && file_exists($origenMedium) && file_exists($origenBig)) {
            return(rename($origenThumb, $destinoThumb) && rename($origenMedium, $destinoMedium) && rename($origenBig, $destinoBig));
        } else {
            return 'Can not move this image';
        }
    }

    public function preDelete($event) {
        $albumPath = $this->getAlbumPath();
        $thumb = $albumPath . 'thumb' . DIRECTORY_SEPARATOR . $this->getName();
        $medium = $albumPath . 'medium' . DIRECTORY_SEPARATOR . $this->getName();
        $big = $albumPath . 'big' . DIRECTORY_SEPARATOR . $this->getName();
        if (file_exists($thumb) && file_exists($medium) && file_exists($big)) {
            unlink($thumb);
            unlink($medium);
            unlink($big);
        }
        $this->deleteCover();
        $this->deleteComments();
        $this->deletePublications();
    }



    public function getOrds() {
        return Doctrine::getTable('Album_photo')->getOrds(array('album_id' => $this->getAlbumId(), 'photo_id' => $this->getId()));
    }

    public function deleteCover() {
        $album = $this->getAlbum();
        if ($album->getCoverId() == $this->getId()) {
            $album->setCoverId(NULL);
            $album->save();
        }
    }

    public function getNext() {
        $ords = $this->getOrds();
        return $ords[$this->getId()]['next'];
    }

    public function getPrev() {
        $ords = $this->getOrds();
        return $ords[$this->getId()]['prev'];
    }

    public function getMyOrd() {
        $ords = $this->getOrds();
        if (count($ords) > 0) {
            return $ords[$this->getId()]['ord'];
        }
    }

    public function deleteComments() {
        if (sfConfig::get('app_photo_commentable')) {
            Doctrine::getTable('Photo')->DeleteComments(array('photo_id' => $this->getId()));
        }
    }

    public function deletePublications() {
        if (in_array('pubs', sfConfig::get('sf_enabled_modules', array()))) {
            Doctrine::getTable('Photo')->DeletePublications(array('photo_id' => $this->getId()));
        }
    }

    public function isMine() {
        return $this->getAlbum()->getUserId() == sfContext::getInstance()->getUser()->getGuardUser()->getId();
    }

    public function getThumb($h=100, $w=100, $size='thumb') {
        $url = $this->getLink($size);
        if (!(is_null($this->x1) && is_null($this->x2) && is_null($this->y1) && is_null($this->y2))) {
            return sfConfig::get('app_base_url') . 'photo/thumb?src=' . $url . '&w=' . $w . '&h=' . $h . '&x1=' . $this->x1 . '&x2=' . $this->x2 . '&y1=' . $this->y1 . '&y2=' . $this->y2;
        } else {
            return sfConfig::get('app_base_url') . 'photo/thumb?src=' . $url . '&w=' . $w . '&h=' . $h;
        }
    }

    public function setAsProfilePhoto() {
        $profilePhoto = $this->getUser()->getProfilePhoto();
        $profilePhoto->setPhotoId($this->id);
        $profilePhoto->save();
    }

    public function getMyTitle() {
        if ($this->getTitle() == '') {
            return '(No title)';
        } else {
            return $this->getTitle();
        }
    }

    public function getDestUserId() {
        return $this->getUser()->getId();
    }

    public function getUserId() {
        return $this->getUser()->getId();
    }

    public function getPubText(Pubs $publication) {
        $return = '';
        $author = $publication->getUser();
        $destUser = $publication->getDestUser();
        $user = sfContext::getInstance()->getUser();
        if ($user->isAuthenticated()) {
            $sessionUser = $user->getGuardUser();
            if ($sessionUser->id == $author->id) {
                if ($destUser->id == $sessionUser->id) {
                    $return = 'Haz publicado una foto en tu muro';
                } else {
                    $return = 'Haz publicado una foto en el muro de ' . $destUser->getName();
                }
            } else {
                if ($destUser->id == $sessionUser->id) {
                    $return = $author->getName() . ' ha publicado una foto en tu muro';
                } else {
                    if ($destUser->id == $author->id) {
                        $return = $author->getName() . ' ha publicado una foto en su muro.';
                    } else {
                        $return = $author->getName() . ' ha publicado una foto en el muro de ' . $destUser->getName();
                    }
                }
            }
        } else {
            $return = $author->getName() . ' ha publicado una foto en el muro de ' . $destUser->getName();
        }
        return $return;
    }

    public function getFavlikes() {
        $query = Doctrine::getTable('Favlike')->createQuery('p')
                ->where('p.record_id = ?', $this->_get('id'))
                ->andWhere('p.record_model = ?', 'photo')
                ->leftJoin('p.User u')
                ->orderBy('p.created_at DESC');
        return $query->execute();
    }

    public function getComments() {
        $query = Doctrine::getTable('Comment')->createQuery('p')
                ->where('p.record_id = ?', $this->_get('id'))
                ->andWhere('p.record_model = ?', 'photo')
                ->leftJoin('p.User u')
                ->orderBy('p.created_at ASC');
        return $query->execute();
    }

}