<?php

/**
 * PluginAlbum_photo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class PluginAlbum_photo extends BaseAlbum_photo {

    static public function getProfileAlbumName() {
        return sfConfig::get('app_profile_album_name', 'Profile photos');
    }

    static public function getWallAlbumName() {
        return sfConfig::get('app_wall_album_name', 'Wall photos');
    }

    public function amountPhotos() {
        return Doctrine::getTable('Photo')->amountPhotos(array('album_id' => $this->getId()));
    }

    public function countAlbums() {
        return Doctrine::getTable('Album_photo')->cantAlbums(array('user_id' => $this->getUserId()));
    }

    public function getLastPhoto($cant=1) {
        return Doctrine::getTable('Album_photo')->getLastPhoto(array('album_id' => $this->getId(), 'limit' => $cant));
    }

    public function getCover($tamanyo='thumb') {
        $link = '';
        $photos = $this->getPhotos();
        if (count($this->getPhotos()) == 0) {
            $link = sfConfig::get('app_base_url') . 'photo/thumb?src=PhotoPlugin/images/album_default.png';
        } else if ($this->getCoverId() == null || $this->getCoverId() == 0) {
            $link = $photos->getLast()->getThumb(100, 100, $tamanyo = 'thumb');
        } else {
            $photo = $photos->getTable()->find($this->getCoverId());
            $link = $photo->getThumb(100, 100, $tamanyo = 'thumb');
        }
        return $link;
    }

    public function ordPhotos($orden) {
        $temp = explode(',', $orden);
        foreach ($temp as $value) {
            $value = explode('=', $value);
            $id = $value[0];
            $ord = $value[1];
            $photo = Doctrine::getTable('photo')->find($id);
            $photo->set('ord', $ord);
            $photo->save();
        }
    }

    public function getPath() {
        $user = $this->getUser();
        return sfConfig::get('sf_web_dir') . DIRECTORY_SEPARATOR . 'users' . DIRECTORY_SEPARATOR . $user->getUsername() . DIRECTORY_SEPARATOR . 'photos' . DIRECTORY_SEPARATOR . $this->getId() . DIRECTORY_SEPARATOR;
    }

    public function preDelete($event) {
        $path = $this->getPath();
        $pathTumbs = $path . 'thumb' . DIRECTORY_SEPARATOR;
        $pathMedium = $path . 'medium' . DIRECTORY_SEPARATOR;
        $pathBig = $path . 'big' . DIRECTORY_SEPARATOR;
        if (file_exists($pathTumbs . 'thumbs.db')) {///estas tres condiciones siguientes son solo para windows que rompe las bolas con su fuckin' thumbs.db
            unlink($pathTumbs . 'thumbs.db');
        }
        if (file_exists($pathMedium . 'thumbs.db')) {
            unlink($pathMedium . 'thumbs.db');
        }
        if (file_exists($pathBig . 'thumbs.db')) {
            unlink($pathBig . 'thumbs.db');
        }
        $photos = $this->getPhotos();
        foreach ($photos as $photo) {
            $photo->delete();
        }
        @rmdir($pathTumbs);
        @rmdir($pathMedium);
        @rmdir($pathBig);
        @rmdir($path);
        $this->deleteComments();
    }

    public function deleteComments() {
        if (sfConfig::get('app_album_commentable')) {
            Doctrine::getTable('Album_photo')->deleteComments(array('album_id' => $this->getId()));
        }
    }

    public function isMine() {
        return $this->getUserId() == sfContext::getInstance()->getUser()->getGuardUser()->getId();
    }

    public function isProfileAlbum() {
        return $this->getName() == self::getProfileAlbumName();
    }

    public function getUserName() {
        return $this->getUser()->getName();
    }

    public function getDestUserId() {
        return $this->getUser()->getId();
    }

    public function getFavlikes() {
        $query = Doctrine::getTable('Favlike')->createQuery('p')
                ->where('p.record_id = ?', $this->_get('id'))
                ->andWhere('p.record_model = ?', 'album_photo')
                ->leftJoin('p.User u')
                ->orderBy('p.created_at DESC');
        return $query->execute();
    }

    public function getComments() {
        $query = Doctrine::getTable('Comment')->createQuery('p')
                ->where('p.record_id = ?', $this->_get('id'))
                ->andWhere('p.record_model = ?', 'album_photo')
                ->leftJoin('p.User u')
                ->orderBy('p.created_at ASC');
        return $query->execute();
    }

}